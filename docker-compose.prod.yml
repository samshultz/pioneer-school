version: "3.9"

services:
  backend:
    build: 
      context: ./backend
      args:
        DJANGO_ENV: production
    container_name: backend
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build: 
      context: ./backend
    container_name: celery_worker
    command: celery -A core worker --loglevel=INFO
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "celery -A core inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-beat:
    build: 
      context: ./backend
    container_name: celery_beat
    command: celery -A core beat --loglevel=INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "celery -A core status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    container_name: frontend
    stdin_open: true
    tty: true
    ports:
      - "3000:80"
    depends_on:
      - backend

  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis

volumes:
  postgres_data: